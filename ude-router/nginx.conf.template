# -*- mode: nginx; -*-

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
}

server {
    listen 80;

    resolver 127.0.0.11;  # Docker internal DNS server

    server_name ~^(?<app_name>.+)\.${UDE_BASE_DOMAIN}$;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;

    resolver 127.0.0.11;  # Docker internal DNS server

    server_name ~^(?<app_name>.+)\.${UDE_BASE_DOMAIN};

    ssl_certificate /etc/nginx/certs/_wildcard.${UDE_BASE_DOMAIN}.pem;
    ssl_certificate_key /etc/nginx/certs/_wildcard.${UDE_BASE_DOMAIN}-key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

    ssl_ciphers HIGH:!aNULL:!MD5;

    error_page 502 @error502;
    error_page 503 @error503;

    location @error502 {
        rewrite ^(.*)$ /502.html break;
        root /usr/share/nginx/html/;
    }

    location @error503 {
        rewrite ^(.*)$ /503.html break;
        root /usr/share/nginx/html/;
    }

    location / {
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_redirect off;

        proxy_set_header Host $host;

        proxy_set_header Connection $proxy_connection;
        proxy_set_header Upgrade $http_upgrade;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;

        # use variable from regexp to pass request to desired container via alias
        proxy_pass http://$app_name;
    }
}
